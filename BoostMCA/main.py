# -*- coding: utf-8 -*-
import asyncio, aiogram, threading, logging, random, string, math, json, time, traceback, re, os, uuid

from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ChatActions
from aiogram import Bot, types

from aiogram.utils.exceptions import (Unauthorized, InvalidQueryID, TelegramAPIError, UserDeactivated,
									CantDemoteChatCreator, MessageNotModified, MessageToDeleteNotFound,
									MessageTextIsEmpty, RetryAfter, CantParseEntities, MessageCantBeDeleted,
									TerminatedByOtherGetUpdates, BotBlocked)

from datetime import datetime, timedelta, timezone


from middleware import ThrottlingMiddleware
from functions import *
from keyboards import *
from config import *
from loader import *



#################################################################################################################################
logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s', level=logging.INFO,)
#logging.getLogger("aiogram").setLevel(logging.INFO)
#logging.getLogger("asyncio").setLevel(logging.INFO)
#################################################################################################################################
class is_reg(BoundFilter):
	def __init__(self, is_self = False):
		self.is_self = is_self # Recurse bypass

	async def check(self, message: types.Message):
		uid, username, first_name = get_user(message)

		channels_to_join = [x for x in channels_data if not await check_channel(x, uid)]
		if len(channels_to_join) > 0:
			if not self.is_self: 
				if type(message) == aiogram.types.message.Message: await message.answer('<b>üí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n<b>‚ö°Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.</b>', reply_markup=await kb_channels(uid, channels_to_join))
				else: await message.message.answer('<b>üí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n<b>‚ö°Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.</b>', reply_markup=await kb_channels(uid, channels_to_join))
			return False

		async with db.pool.acquire() as conn:
			user_db = await conn.fetchrow('SELECT username, first_name, is_banned FROM users WHERE uid = $1', uid)
			if user_db:
				if user_db["username"] != username: await conn.execute('UPDATE users SET username = $1 WHERE uid = $2', username, uid)
				elif user_db['first_name'] != first_name: await conn.execute('UPDATE users SET first_name = $1 WHERE uid = $2', first_name, uid)
				

				if user_db['is_banned']: return False
			else:
				if not self.is_self: return False

				referral_from_id = message.get_args() if message.get_args() not in ('', 'none', 'None') else None
				try:
					if not referral_from_id: await conn.execute('INSERT INTO users (uid, username, first_name, registration_date) VALUES ($1, $2, $3, $4)', uid, username, first_name, int(time.time()))
					else:
						await conn.execute('INSERT INTO users (uid, username, first_name, registration_date, referral_from_id) VALUES ($1, $2, $3, $4, $5)', uid, username, first_name, int(time.time()), referral_from_id)
				except: await conn.execute('INSERT INTO users (uid, username, first_name, registration_date) VALUES ($1, $2, $3, $4)', uid, username, first_name, int(time.time()))
				await admin_spam(f'<b>üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\nüë§ Username: {format_user_url(uid, username, first_name)}\nüÜî Telegram ID: <code>{uid}</code></b>')
		return True
#################################################################################################################################

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - /start
@dp.message_handler(is_reg(True), CommandStart(), state='*')
async def CommandStart_(message: types.Message, state: FSMContext):
	await state.finish()

	uid, username, first_name = get_user(message)
	await message.answer_photo(photo=open(images['start_msg'], 'rb'), caption=f'<b>üí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n<b>ü§ñ –ë—É—Å—Ç—ã –ú–¶–ê</b> ‚Äî –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ç–µ–±–µ –∫—É–ø–∏—Ç—å –±—É—Å—Ç—ã (–≥–æ–ª–æ—Å–∞) –≤ –∫–∞–Ω–∞–ª –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–æ–∏/—Ä–µ–∞–∫—Ü–∏–∏/–∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥—Ä. –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ –≤—Å–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–µ.\n \n<b>–û—Ç–∑—ã–≤—ã - @boostmca</b>', reply_markup=await kb_menu(uid))


@dp.message_handler(is_reg(), content_types=['text'])
async def handler_text(message: types.Message, state: FSMContext, custom_data = None):
	mt = custom_data if custom_data else message.text
	ts = int(time.time())

	uid, username, first_name = get_user(message)
	user_db = await db.fetchrow('SELECT * FROM users WHERE uid = $1', uid)


	if mt == 'üí∞ –ü—Ä–æ—Ñ–∏–ª—å|–ë–∞–ª–∞–Ω—Å':
		await message.answer_photo(photo=open(images['user_menu'], 'rb'), caption=f'<b>üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n<i>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>\n\nüîë ID:  <code>{uid}</code>\nüïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:  <code>{datetime.strftime(datetime.fromtimestamp(user_db["registration_date"]),"%d.%m.%Y")}</code>\n\nüí≥ –ë–∞–ª–∞–Ω—Å:  <code>{round(user_db["balance"], 3)} ‚ÇΩ</code>', reply_markup=await kb_profile(user_db))

	elif mt == '‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã':
		await message.answer_photo(photo=open(images['main_menu'], 'rb'), caption=f'<b>‚ùì {faq_text_ids[0]}</b>\n\n{faq_text[faq_text_ids[0]]}', reply_markup=await kb_faq())

	elif mt == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
		await message.answer_photo(photo=open(images['main_menu'], 'rb'), caption=f'<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Å—ã–ª–∫–∏\n\nüïì –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:  <code>{datetime.strftime(datetime.fromtimestamp(project_start_ts),"%d.%m.%Y")} ({math.ceil((ts - project_start_ts)/86400)} {morpher(math.ceil((ts - project_start_ts)/86400), "–¥–Ω–µ–π")})</code>\nüë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{username_support}</b>', reply_markup=await kb_about())

	elif mt == 'üßëüèª‚Äçüíª –ê–¥–º–∏–Ω –º–µ–Ω—é':
		if uid in admin_ids: await message.answer('<b>üßëüèª‚Äçüíª –ê–¥–º–∏–Ω –º–µ–Ω—é</b>', reply_markup=await kb_admin_menu())

	elif mt == 'getdb':
		if uid in admin_ids: await message.answer_document(open('db.db','rb'))

	elif mt == '‚≠êÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç—ã':
		return await smm_start_message(message, state)


@dp.errors_handler()
async def errors_handler(update, exception):
	# –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
	if isinstance(exception, MessageNotModified):
		# logging.exception(f"MessageNotModified: {exception}\nUpdate: {update}")
		return True

	# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
	if isinstance(exception, BotBlocked):
		# logging.exception(f"BotBlocked: {exception}\nUpdate: {update}")
		return True

	if isinstance(exception, CantDemoteChatCreator):
		logging.exception(f"CantDemoteChatCreator: {exception}\nUpdate: {update}")
		return True

	# –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
	if isinstance(exception, MessageCantBeDeleted):
		#logging.exception(f"MessageCantBeDeleted: {exception}\nUpdate: {update}")
		return True

	# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
	if isinstance(exception, MessageToDeleteNotFound):
		# logging.exception(f"MessageToDeleteNotFound: {exception}\nUpdate: {update}")
		return True

	# –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ
	if isinstance(exception, MessageTextIsEmpty):
		# logging.exception(f"MessageTextIsEmpty: {exception}\nUpdate: {update}")
		return True

	# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω
	if isinstance(exception, UserDeactivated):
		# logging.exception(f"UserDeactivated: {exception}\nUpdate: {update}")
		return True

	# –ë–æ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
	if isinstance(exception, Unauthorized):
		logging.exception(f"Unauthorized: {exception}\nUpdate: {update}")
		return True

	# –ù–µ–≤–µ—Ä–Ω—ã–π Query ID
	if isinstance(exception, InvalidQueryID):
		# logging.exception(f"InvalidQueryID: {exception}\nUpdate: {update}")
		return True

	# –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ
	if isinstance(exception, RetryAfter):
		# logging.exception(f"RetryAfter: {exception}\nUpdate: {update}")
		return True

	# –£–∂–µ –∏–º–µ–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –±–æ—Ç
	if isinstance(exception, TerminatedByOtherGetUpdates):
		print("You already have an active bot. Turn it off.")
		logging.exception(f"TerminatedByOtherGetUpdates: {exception}\nUpdate: {update}")
		return True

	# –û—à–∏–±–∫–∞ –≤ HTML/MARKDOWN —Ä–∞–∑–º–µ—Ç–∫–µ
	if isinstance(exception, CantParseEntities):
		logging.exception(f"CantParseEntities: {exception}\nUpdate: {update}")
		return True

	# –û—à–∏–±–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –ê–ü–ò
	if isinstance(exception, TelegramAPIError):
		logging.exception(f"TelegramAPIError: {exception}\nUpdate: {update}")
		return True

	# –í—Å–µ –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏
	logging.exception(f"Exception: {exception}\nUpdate: {update}")

	try:
		try: os.makedirs('temp')
		except: pass
		f_name= f'temp/{time.time()}.txt'
		open(f_name, 'w', encoding='utf-8').write(f"{str(update)}\n\n{str(traceback.format_exc())}")
		for x in admin_ids:
			try: await bot.send_document(x, document=open(f_name, 'rb'), caption=f"<b>Exception:</b> <code>{exception}</code>", reply_markup=await kb_close())
			except: pass
		threading.Thread(target=os_delete, args=[f_name]).start()
	except: pass

	return True



##################################!!! HANDLERS - UTILS | TEMP - HANDLERS !!!############################################################
@dp.callback_query_handler(text_startswith='utils', state='*')
async def handler_utils(call: types.CallbackQuery, state: FSMContext, custom_data = None):
	cd = custom_data.split(':') if custom_data else call.data.split(':')

	if cd[1] == 'delete':
		try: await call.message.delete()
		except: pass
	
	elif cd[1] == 'faq':
		cur_faq_id = int(cd[3])
		
		try: await call.message.edit_media(media=types.InputMediaPhoto(media=open(images['main_menu'], 'rb'), caption=f'‚ùì <b>{faq_text_ids[cur_faq_id]}</b>\n\n{faq_text[faq_text_ids[cur_faq_id]]}'), reply_markup=await kb_faq(cur_faq_id))
		except: pass

	elif cd[1] == 'dm_user':
		target_uid = int(cd[2])
		text = users_messages.get(cd[3])
		if not text: return
		try: await bot.send_message(target_uid, text, reply_markup=await kb_close())
		except: pass

		await call.answer()

	elif cd[1] == 'check_sub':
		uid, username, first_name = get_user(call)
		for x in channels_data:
			await cache.delete(f"check_channel:{x}:{uid}")
		channels_to_join = [x for x in channels_data if not await check_channel(x, uid)]
		await delmsg(call.message)
		if len(channels_to_join) > 0:
			await call.message.answer('<b>‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n<b>‚ö°Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.</b>', reply_markup=await kb_channels(uid, channels_to_join))
		else:
			await call.message.answer_photo(photo=open(images['start_msg'], 'rb'), caption=f'<b>üí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n<b>ü§ñ –ë—É—Å—Ç—ã –ú–¶–ê</b> ‚Äî –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ç–µ–±–µ –∫—É–ø–∏—Ç—å –±—É—Å—Ç—ã (–≥–æ–ª–æ—Å–∞) –≤ –∫–∞–Ω–∞–ª –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–æ–∏/—Ä–µ–∞–∫—Ü–∏–∏/–∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥—Ä. –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ –≤—Å–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–µ.\n \n<b>–û—Ç–∑—ã–≤—ã - @boostmca</b>', reply_markup=await kb_menu(uid))



@dp.callback_query_handler(text_startswith='temp')
async def handler_temp(call: types.CallbackQuery, state: FSMContext, custom_data = None):
	await state.finish()
	uid, username, first_name = get_user(call)

	cd = custom_data.split(':') if custom_data else call.data.split(':')

	if cd[1] == 'fastbalance': return await states_user_refill_balance(call.message, state, cd[2])
	
	elif cd[1] == 'finduser':
		try: await call.message.delete()
		except: pass
		return await states_admin_search_user(call.message, state, cd[2])


##################################!!! HANDLERS - USER - HANDLERS !!!#############################################################
class states_user(StatesGroup):
	refill_balance = State()
	activate_code = State()
	ref_balance_withdraw = State()


@dp.callback_query_handler(is_reg(), text_startswith='user')
async def handler_user(call: types.CallbackQuery, state: FSMContext, custom_data = None):
	await state.finish()
	cd = custom_data.split(':') if custom_data else call.data.split(':')
	ts = int(time.time())
	uid, username, first_name = get_user(call)
	
	if cd[1] == 'menu': 
		user_db = await db.fetchrow('SELECT * FROM users WHERE uid = $1', uid)

		try: await call.message.edit_media(media=types.InputMediaPhoto(media=open(images['user_menu'], 'rb'), caption=f'<b>üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n<i>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>\n\nüîë ID:  <code>{uid}</code>\nüïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:  <code>{datetime.strftime(datetime.fromtimestamp(user_db["registration_date"]),"%d.%m.%Y")}</code>\n\nüí≥ –ë–∞–ª–∞–Ω—Å:  <code>{round(user_db["balance"], 3)} ‚ÇΩ</code>'), reply_markup=await kb_profile(user_db))
		except:
			await delmsg(call.message)
			await call.message.answer_photo(photo=open(images['user_menu'], 'rb'), caption=f'<b>üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n<i>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>\n\nüîë ID:  <code>{uid}</code>\nüïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:  <code>{datetime.strftime(datetime.fromtimestamp(user_db["registration_date"]),"%d.%m.%Y")}</code>\n\nüí≥ –ë–∞–ª–∞–Ω—Å:  <code>{round(user_db["balance"], 3)} ‚ÇΩ</code>', reply_markup=await kb_profile(user_db))

	elif cd[1] == 'show_orders':
		orders = await db.fetch('SELECT * FROM orders WHERE uid = $1 ORDER BY id DESC', uid)
		if len(orders) == 0: return await call.answer('‚ùóÔ∏è –í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∑–∞–∫–∞–∑!', show_alert=True)

		try: await call.message.edit_media(media=types.InputMediaPhoto(media=open(images['user_menu'], 'rb'), caption='<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>'), reply_markup=await kb_user_orders(orders))
		except:
			await delmsg(call.message)
			await call.message.answer_photo(photo=open(images['user_menu'], 'rb'), caption='<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>', reply_markup=await kb_user_orders(orders))


	elif cd[1] == 'show_order':
		order_id = int(cd[2])

		order_data = await db.fetchrow('SELECT * FROM orders WHERE id = $1', order_id)
		if order_data['order_status'] == 1:
			order_status = 'Completed'
		else:
			if time.time() - order_data['unix'] < 20: order_status = 'Pending'
			else:
				await call.answer('‚öôÔ∏è –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...')
				order_status = None

			if not order_status: order_status = '–ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'

		text = f'''<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ\n‚î£ üëÅ‚Äçüó® ID –∑–∞–∫–∞–∑–∞:  <code>{order_data["order_id"]}</code>\n‚î£ üíà –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  <code>{order_data["order_category_name"]}</code>\n‚î£ ‚≠êÔ∏è –£—Å–ª—É–≥–∞:  <code>{order_data["order_service_name"]}</code>\n‚îÉ\n‚î£ üîó –°—Å—ã–ª–∫–∞:  <code>{order_data["order_url"]}</code>\n‚î£ üíé –ö–æ–ª-–≤–æ:  <code>{order_data["order_amount"]} —à—Ç.</code>\n‚î£ üí∞ –¶–µ–Ω–∞:  <code>{order_data["order_price"]} ‚ÇΩ</code>\n‚îÉ\n‚îÉ\n‚îó {order_statuses_emoji[order_status]} –°—Ç–∞—Ç—É—Å:  <code>{order_statuses[order_status] if order_statuses.get(order_status) else order_status}</code></b>'''

		try: msg = await call.message.edit_media(media=types.InputMediaPhoto(media=open(images['user_menu'], 'rb'), caption=text), reply_markup=await kb_user_order())
		except:
			await delmsg(call.message)
			msg = await call.message.answer_photo(photo=open(images['user_menu'], 'rb'), caption=text, reply_markup=await kb_user_order())


		if order_data['order_status'] != 1:
			order_status = (await ssf_client.get_order(order_data['order_id'])).get('status')
			if not order_status: order_status = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'

			text = f'''<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ\n‚î£ üëÅ‚Äçüó® ID –∑–∞–∫–∞–∑–∞:  <code>{order_data["order_id"]}</code>\n‚î£ üíà –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  <code>{order_data["order_category_name"]}</code>\n‚î£ ‚≠êÔ∏è –£—Å–ª—É–≥–∞:  <code>{order_data["order_service_name"]}</code>\n‚îÉ\n‚î£ üîó –°—Å—ã–ª–∫–∞:  <code>{order_data["order_url"]}</code>\n‚î£ üíé –ö–æ–ª-–≤–æ:  <code>{order_data["order_amount"]} —à—Ç.</code>\n‚î£ üí∞ –¶–µ–Ω–∞:  <code>{order_data["order_price"]} ‚ÇΩ</code>\n‚îÉ\n‚îÉ\n‚îó {order_statuses_emoji[order_status]} –°—Ç–∞—Ç—É—Å:  <code>{order_statuses[order_status] if order_statuses.get(order_status) else order_status}</code></b>'''
			try: await msg.edit_media(media=types.InputMediaPhoto(media=open(images['user_menu'], 'rb'), caption=text), reply_markup=await kb_user_order())
			except:
				await delmsg(msg)
				await call.message.answer_photo(photo=open(images['user_menu'], 'rb'), caption=text, reply_markup=await kb_user_order())

		

	elif cd[1] == 'refill_balance': # MAIN -||- –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê
		if cd[2] == '0': #–í—ã–±–æ—Ä —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
			await states_user.refill_balance.set()
			await delmsg(call.message)
			async with state.proxy() as data:
				data['message'] = await call.message.answer(
					f'<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n<i>–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É</i>',
					reply_markup=await kb_refill_balancePrices())

		elif cd[2] == '1': #–í—ã–±—Ä–∞–Ω–∞ —Å—É–º–º–∞ --> –≤—ã–±–æ—Ä –ø–ª–∞—Ç–µ–∂–∫–∏
			refill_amount = float(cd[3])
			try: await call.message.edit_text(f'<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n–°—É–º–º–∞:  <code>{refill_amount} ‚ÇΩ</code>\n\n<i>‚ùî –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>',reply_markup=await kb_payment_select(refill_amount))
			except: pass

		elif cd[2] == '2': #–í—ã–±—Ä–∞–Ω–∞ –ø–ª–∞—Ç–µ–∂–∫–∞ --> –≤—ã–¥–∞—á–∞ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
			refill_service = cd[3]
			refill_amount = round(float(cd[4]), 2)

			if refill_service == 'telegram':
				try:
					await bot.send_invoice(uid, title=telegram_title, description=telegram_description, provider_token=telegram_token, currency=telegram_currency, is_flexible=False, prices=[types.LabeledPrice(label='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', amount=int(refill_amount*100))], payload=f'{uid}:{refill_amount}')
					return await delmsg(call.message)
				except: return await call.message.edit_text('‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É</b> ‚ùå', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'‚Ü™ –ù–∞–∑–∞–¥':f'cd^user:refill_balance:1:{refill_amount}'}))

			url = await payment_get_url(refill_service, refill_amount, uid)
			if refill_amount < payment_warn_limits[refill_service]:
				await call.answer(f'‚ö†Ô∏è –ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç/—Å–±–ø –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - {payment_warn_limits[refill_service]} ‚ÇΩ',show_alert=True)
			elif refill_amount < payment_cancel_limits[refill_service]:
				return await call.answer(f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º - {payment_cancel_limits[refill_service]} ‚ÇΩ',show_alert=True)

			if not url[0]:
				return await call.message.edit_text('‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É</b> ‚ùå', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'‚Ü™ –ù–∞–∑–∞–¥':f'cd^user:refill_balance:1:{refill_amount}'}))

			asyncio.get_event_loop().create_task(payment_check(refill_service, refill_amount, uid, username, first_name, url[1]))
			await call.message.edit_text(
				f'<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n–ö –æ–ø–ª–∞—Ç–µ: <code>{refill_amount} ‚ÇΩ</code>\n\n<i>‚ùî –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.\n\n</i><b>‚ùóÔ∏è –í–ê–ñ–ù–û:</b><i> –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç—É —Å—É–º–º—É, —á—Ç–æ —É–∫–∞–∑–∞–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã!\n\n</i><b>‚òπÔ∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –¥–æ—à—ë–ª –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞?</b><i>\n–ù–∞–ø–∏—à–∏ –Ω–∞–º - {username_support}, –ø—Ä–∏–ª–æ–∂–∏–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.</i>',
				reply_markup=await kb_payment_get(refill_amount, url[2]))


	elif cd[1] == 'referal_program': # MAIN -||- –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê
		ref_len, ref_profit, ref_balance = await get_ref_stats(uid)
		try: await call.message.edit_media(media=types.InputMediaPhoto(media=open(images['user_menu'], 'rb'), caption=f'<b>üíô –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üíô</b>\n\n<b>üîó –°—Å—ã–ª–∫–∞:</b>\n<code>{bot_info["username"]}.t.me?start={uid}</code>\n<i>üìò –ù–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—à—å –¥–∞–≤–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ <code>{int(referral_percent*100)}%</code> —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–µ</i>\n\nüíô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:  <code>{ref_len}</code>\nüõç –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:  <code>{ref_profit} —Ä—É–±</code>\nüí∞ –ë–∞–ª–∞–Ω—Å –Ω–∞ –≤—ã–≤–æ–¥:  <code>{ref_balance} —Ä—É–±</code>'), reply_markup=await kb_ref_menu())
		except:
			await delmsg(call.message)
			await call.message.answer_photo(photo=open(images['user_menu'], 'rb'), caption=f'<b>üíô –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üíô</b>\n\n<b>üîó –°—Å—ã–ª–∫–∞:</b>\n<code>{bot_info["username"]}.t.me?start={uid}</code>\n<i>üìò –ù–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—à—å –¥–∞–≤–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ <code>{int(referral_percent*100)}%</code> —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–µ</i>\n\nüíô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:  <code>{ref_len}</code>\nüõç –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:  <code>{ref_profit} —Ä—É–±</code>\nüí∞ –ë–∞–ª–∞–Ω—Å –Ω–∞ –≤—ã–≤–æ–¥:  <code>{ref_balance} —Ä—É–±</code>', reply_markup=await kb_ref_menu())

	elif cd[1] == 'request_ref_withdraw':
		ref_balance = round(float((await db.fetchrow('SELECT * FROM users WHERE uid = $1', uid))['ref_balance']), 1)
		if ref_balance < min_ref_withdraw:
			return await call.answer(f'üíÆ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–∞—á–∏ –Ω–∞ –≤—ã–≤–æ–¥ {min_ref_withdraw} —Ä—É–±–ª–µ–π.', show_alert=True)

		await delmsg(call.message)
		await states_user.ref_balance_withdraw.set()
		msg = await call.message.answer(f'üíÆ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–∞—á–∏ –Ω–∞ –≤—ã–≤–æ–¥  <code>{min_ref_withdraw} —Ä—É–±–ª–µ–π</code>.\nüí∞ –ë–∞–ª–∞–Ω—Å –Ω–∞ –≤—ã–≤–æ–¥:  <code>{ref_balance}</code> —Ä—É–±\n\n<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–∞—á–∏ –Ω–∞ –≤—ã–≤–æ–¥</b>', reply_markup=await kb_back('user:referal_program', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
		await state.update_data(withdraw_amount=None, ref_balance=ref_balance, msg=[msg])

	elif cd[1] == 'activate_promocode': # MAIN -||- –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞/–∫—É–ø–æ–Ω–∞
		await states_user.activate_code.set()
		await delmsg(call.message)
		msg = await call.message.answer('<b>üéü –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω</b>\n<i>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫—É–ø–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</i>', reply_markup=await kb_back('user:menu'))
		await state.update_data(msg=msg)


@dp.message_handler(state=states_user.ref_balance_withdraw)
async def states_user_ref_balance_withdraw(message: types.Message, state: FSMContext):
	mt = message.text.strip()
	uid, username, first_name = get_user(message)
	state_data = await state.get_data()
	if state_data['withdraw_amount']:
		withdraw_amount = float(state_data['withdraw_amount'])
		user_db = await db.fetchrow('SELECT * FROM users WHERE uid = $1', uid)
		await db.execute('UPDATE users SET ref_balance = $1 WHERE uid = $2', round(float(user_db['ref_balance']) - withdraw_amount, 2), uid)

		url = f'<a href="t.me/{username}">{username}</a>' if username not in ['none', None] else f'<a href="tg://user?id={uid}">{username}</a>'
		await admin_spam(f'<b>üíµ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {url} (<code>{uid}</code>)\n‚îú –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:  <code>{withdraw_amount} —Ä—É–±</code>\n‚îî –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:  <code>{mt}</code>', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ': f'cd^admin:ref_balance:{uid}:{withdraw_amount}:s', '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å': f'cd^admin:ref_balance:{uid}:{withdraw_amount}:c'}))
		await message.answer('<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω.</b>\n\n–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∏—Ç –¥–æ 24 —á–∞—Å–æ–≤.')
		await state.finish()
		await delmsg(*state_data['msg'], message)
	else:
		try: withdraw_amount = float(mt)
		except:
			msg = await message.answer(f'<b>‚ô¶Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤</b>', reply_markup=await kb_back('user:referal_program', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
			return await state.update_data(msg=[*state_data['msg'], msg])
		
		if withdraw_amount < min_ref_withdraw:
			msg = await message.answer(f'üíÆ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–∞—á–∏ –Ω–∞ –≤—ã–≤–æ–¥  <code>{min_ref_withdraw}</code> —Ä—É–±–ª–µ–π.', reply_markup=await kb_back('user:referal_program', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
			return await state.update_data(msg=[*state_data['msg'], msg])

		msg = await message.answer(f'üíÆ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–∞—á–∏ –Ω–∞ –≤—ã–≤–æ–¥  <code>{min_ref_withdraw}</code> —Ä—É–±–ª–µ–π.\n\nüá∑üá∫ –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/–°–±–ø –Ω–æ–º–µ—Ä/USDT-trc20/Ton</b>.', reply_markup=await kb_back('user:referal_program', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'))
		await state.update_data(withdraw_amount=withdraw_amount, msg=[*state_data['msg'], msg, message])


@dp.callback_query_handler(state=states_user.ref_balance_withdraw)
async def states_user_ref_balance_withdraw_(call: types.CallbackQuery, state: FSMContext):
	await state.finish()
	return await handler_user(call, state)


# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ - –≤–≤–æ–¥ –∫–æ–¥–∞
@dp.message_handler(state=states_user.activate_code)
async def states_user_activate_code(message: types.Message, state: FSMContext):
	mt = message.text.strip()
	uid, username, first_name = get_user(message)
	user_discounts = await db.fetch('SELECT * FROM discounts WHERE (uid, discount_is_active) = ($1, True)', uid)

	async with state.proxy() as data:
		await delmsg(message, data['msg'])
		promocode_data = await db.fetchrow('SELECT * FROM promocodes WHERE promocode_id = $1', mt)

		if promocode_data is None:
			data['msg'] = await message.answer(
				'<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ;(</b>\n<i>–¢–∞–∫–æ–≥–æ –∫—É–ø–æ–Ω–∞ –Ω–µ—Ç</i>',
				reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1),{'‚Ü™ –ù–∞–∑–∞–¥':'cd^user:menu'})
			); return

		elif promocode_data['promocode_is_active'] is False:
			data['msg'] = await message.answer(
				'<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ;(</b>\n<i>–ö—É–ø–æ–Ω —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–∞–∑</i>',
				reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1),{'‚Ü™ –ù–∞–∑–∞–¥':'cd^user:menu'})
			); return

		elif len(user_discounts) > 0:
			data['msg'] = await message.answer(
				'<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ;(</b>\n<i>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—É–ø–æ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É</i>',
				reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1),{'‚Ü™ –ù–∞–∑–∞–¥':'cd^user:menu'})
			); return

		elif len(promocode_data['promocode_activated_uids'].split(";") if promocode_data['promocode_activated_uids'] != "" else []) >= promocode_data['promocode_maxuses']:
			await db.execute('UPDATE promocodes SET promocode_is_active = False WHERE promocode_id = $1', promocode_data['promocode_id'])
			
			data['msg'] = await message.answer(
				'<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ;(</b>\n<i>–ö—É–ø–æ–Ω —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–∞–∑</i>',
				reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1),{'‚Ü™ –ù–∞–∑–∞–¥':'cd^user:menu'})
			); return
	
		elif str(uid) in str(promocode_data['promocode_activated_uids']):
			data['msg'] = await message.answer(
				'<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ;(</b>\n<i>–ö—É–ø–æ–Ω —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ</i>',
				reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1),{'‚Ü™ –ù–∞–∑–∞–¥':'cd^user:menu'})
			); return

	await state.finish()


	if promocode_data['promocode_type'] == 1:
		async with db.pool.acquire() as conn:
			await conn.execute('UPDATE users SET balance = balance+$1 WHERE uid = $2', promocode_data['promocode_reward'], uid)

			if len(promocode_data['promocode_activated_uids'].split(";") if promocode_data['promocode_activated_uids'] != "" else [])+1 >= promocode_data['promocode_maxuses']:
				await conn.execute('UPDATE promocodes SET (promocode_activated_uids, promocode_is_active) = ($1, False) WHERE promocode_id = $2', f"{promocode_data['promocode_activated_uids']};{uid}" if promocode_data['promocode_activated_uids'] != "" else str(uid), promocode_data['promocode_id'])
			else:
				await conn.execute('UPDATE promocodes SET promocode_activated_uids = $1 WHERE promocode_id = $2', f"{promocode_data['promocode_activated_uids']};{uid}" if promocode_data['promocode_activated_uids'] != "" else str(uid), promocode_data['promocode_id'])
	
	elif promocode_data['promocode_type'] == 2:
		async with db.pool.acquire() as conn:
			await conn.execute('INSERT INTO discounts (uid, promocode_id, discount_maxuses, discount_amount) VALUES ($1, $2, $3, $4)', uid, promocode_data['id'], promocode_data['promocode_maxuses'], promocode_data['promocode_reward'])
			await conn.execute('UPDATE promocodes SET (promocode_activated_uids, promocode_is_active) = ($1, False) WHERE promocode_id = $2', f"{promocode_data['promocode_activated_uids']};{uid}" if promocode_data['promocode_activated_uids'] != "" else str(uid), promocode_data['promocode_id'])

	url = f'<a href="t.me/{username}">{first_name}</a>' if username else f'<a href="tg://user?id={uid}">{first_name}</a>'
	if promocode_data['promocode_type'] == 1: text = f'<b>üåÄ {url} (<code>{uid}</code>) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ <code>{promocode_data["promocode_id"]}</code> –∏ –ø–æ–ª—É—á–∏–ª <code>{promocode_data["promocode_reward"]} ‚ÇΩ</code></b>'
	elif promocode_data['promocode_type'] == 2: text = f'<b>üåÄ {url} (<code>{uid}</code>) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ <code>{promocode_data["promocode_id"]}</code> –∏ –ø–æ–ª—É—á–∏–ª —Å–∫–∏–¥–∫—É –Ω–∞  <code>{promocode_data["promocode_reward"]} %</code></b>'

	await admin_spam(text)
	if promocode_data['promocode_type'] == 1:
		text = f'üåÄ <b>–ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n<i>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞</i> <code>{promocode_data["promocode_reward"]} ‚ÇΩ</code>'
	elif promocode_data['promocode_type'] == 2:
		text = f'üåÄ <b>–ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n<i>–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É <code>{promocode_data["promocode_reward"]} %</code> –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑</i>'

	await message.answer(text, reply_markup=await kb_back('user:menu'))

@dp.callback_query_handler(state=states_user.activate_code)
async def states_user_activate_code_(call: types.CallbackQuery, state: FSMContext):
	return await handler_user(call, state)


# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - –≤—ã–±–æ—Ä –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
@dp.message_handler(state=states_user.refill_balance)
async def states_user_refill_balance(message: types.Message, state: FSMContext, custom_data=None):
	if custom_data is None:
		try: amount = float(message.text)
		except:
			try: await message.delete()
			except: pass
			return await state.update_data(v=await message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</b>'))

		async with state.proxy() as data:
			if 'v' in data:
				try: await data['v'].delete()
				except Exception as e: logging.error(e)

			try: await data['message'].delete()
			except: pass
			await state.finish()
	else: amount = float(custom_data)
	amount = round(amount, 2)

	try: await message.delete()
	except: pass
	await message.answer(f'<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n–°—É–º–º–∞:  <code>{amount} ‚ÇΩ</code>\n<i>‚ùî –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>',reply_markup=await kb_payment_select(amount))

@dp.callback_query_handler(state=states_user.refill_balance)
async def states_user_refill_balance_(call: types.CallbackQuery, state: FSMContext):
	return await handler_user(call, state)

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - telegram ==> pre-checkout
@dp.pre_checkout_query_handler(lambda query: True)
async def payment_telegram_pre_checkout(pre_checkout_q: types.PreCheckoutQuery):
	logging.debug(f'Pre checkout: {pre_checkout_q}')
	await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@dp.message_handler(content_types=types.message.ContentType.SUCCESSFUL_PAYMENT)
async def payment_telegram_success(message: types.Message, state: FSMContext):
	uid, username, first_name = get_user(message)
	payment_service = 'telegram'
	payment_info = message.successful_payment
	unix = int(time.time())
	invoce_id = f'{uid}:{unix}:{random.randint(111,999)}'

	referral_from_id = (await db.fetchrow('SELECT referral_from_id FROM users WHERE uid = $1', uid))['referral_from_id']
	amount = round(payment_info.total_amount / 100, 2)

	await db.execute('INSERT INTO transactions_refill(transaction_id, uid, issue_date, payment_service_name, payment_amount) VALUES ($1, $2, $3, $4, $5)', invoce_id, uid, unix, payment_service, amount)
	if referral_from_id:
		referral_amount = round(amount*referral_percent, 2)
		db_referral_from_id = await db.fetchrow('SELECT * FROM users WHERE uid = $1', referral_from_id)
		await db.execute('UPDATE users SET balance = balance+$1 WHERE uid = $2', referral_amount, referral_from_id)
		
		url = f'<a href="t.me/{username}">{first_name}</a>' if username else f'<a href="tg://user?id={uid}">{first_name}</a>'
		try: await bot.send_message(referral_from_id, f'<b>üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {url} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É</b> <code>{amount} ‚ÇΩ</code>\n<b>üìÉ –í—ã –ø–æ–ª—É—á–∏–ª–∏</b> <code>{referral_amount} ‚ÇΩ</code>', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'‚ùå –ó–∞–∫—Ä—ã—Ç—å':'cd^utils:delete'}), disable_web_page_preview=True)
		except: pass
		referral_from_id_username = db_referral_from_id['username']
		url = f'<a href="t.me/{referral_from_id_username}">{referral_from_id_username}</a>' if referral_from_id_username not in ['none', None] else f'<a href="tg://user?id={referral_from_id}">{referral_from_id_username}</a>'
		await admin_spam(f'<b>üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {url} (<code>{referral_from_id}</code>) –ø–æ–ª—É—á–∏–ª —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ <code>{referral_amount} ‚ÇΩ</code></b>')

	await admin_spam(f'<b>{payment_service.capitalize()}</b>\n<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> <b>@{username} | <code>{uid}</code></b>\n<i>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</i> <code>{amount} ‚ÇΩ</code>')
	await db.execute('UPDATE users SET balance = balance+$1 WHERE uid = $2', amount, uid)
	try: await bot.send_message(uid, f'<b>üåÄ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É  <code>{amount} ‚ÇΩ</code></b>', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'‚ùå –ó–∞–∫—Ä—ã—Ç—å':'cd^utils:delete'}))
	except: pass

	return await handler_text(message, state, custom_data='üë§ –ü—Ä–æ—Ñ–∏–ª—å')


	
##################################!!! HANDLERS - SMM - HANDLERS !!!#############################################################
class states_smm(StatesGroup):
	add_creds = State()

@dp.message_handler(text='‚≠êÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É')
async def smm_start_message(message: types.Message, state: FSMContext):
	await message.answer_photo(photo=open(images['smm_menu'], 'rb'), caption='<i>üíà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–∫—Ä—É—Ç–∫–∏:</i>', reply_markup=await kb_get_categories())


@dp.callback_query_handler(text_startswith='smm')
async def handler_smm(call: types.CallbackQuery, state: FSMContext, custom_data=None):
	await state.finish()
	cd = custom_data.split(':') if custom_data else call.data.split(':')
	uid, username, first_name = get_user(call)
	ts = int(time.time())


	if cd[1] == 'menu':
		page_id = int(cd[2]) if len(cd) > 3 else 1
		prefix = cd[3] if len(cd) == 4 and cd[3] != 'None' else ''

		try: await call.message.edit_media(media=types.InputMediaPhoto(media=open(images['smm_menu'], 'rb'), caption='<i>üíà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–∫—Ä—É—Ç–∫–∏:</i>'), reply_markup=await kb_get_categories(page=page_id, prefix=prefix))
		except:
			await delmsg(call.message)
			await call.message.answer_photo(photo=open(images['smm_menu'], 'rb'), caption='<i>üíà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–∫—Ä—É—Ç–∫–∏:</i>', reply_markup=await kb_get_categories(page=page_id, prefix=prefix))

	elif cd[1] == 'c':
		category_name = cd[2]
		page_id = int(cd[3])

		if category_name.startswith('__main'):
			prefix = category_name[-3:-2]
			
			try: await call.message.edit_media(media=types.InputMediaPhoto(media=open(images['smm_menu'], 'rb'), caption='<i>üíà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–∫—Ä—É—Ç–∫–∏:</i>'), reply_markup=await kb_get_categories(page=page_id, prefix=prefix))
			except:
				await delmsg(call.message)
				await call.message.answer_photo(photo=open(images['smm_menu'], 'rb'), caption='<i>üíà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–∫—Ä—É—Ç–∫–∏:</i>', reply_markup=await kb_get_categories(page=page_id, prefix=prefix))
			return


		text = f'<i>üåê –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:</i>\n‚îó –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  <code>{sets_categories[category_name]}</code>'
		kb = await kb_get_categories(category_name, page=page_id, prefix=category_name[0] if not cpf(category_name) else None)

		try: await call.message.edit_media(media=types.InputMediaPhoto(media=open(images['smm_menu'], 'rb'), caption=text), reply_markup=kb)
		except:
			await delmsg(call.message)
			await call.message.answer_photo(photo=open(images['smm_menu'], 'rb'), caption=text, reply_markup=kb)

	elif cd[1] == 'ct':
		category_name = cd[2]
		category_type_hash = cd[3]
		page_id = int(cd[4])

		try:
			x = ssf_client.all_data['category_type_hash'].get(f'{rpf(category_name)}_{category_type_hash}')
			text = f'<i>üåê –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</i>\n‚î£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  <code>{sets_categories[category_name]}</code>\n‚îó –¢–∏–ø:  <code>{x}</code>'
			kb = await kb_get_categories(category_name, category_type_hash, page=page_id)

			try: await call.message.edit_media(media=types.InputMediaPhoto(media=open(images['smm_menu'], 'rb'), caption=text), reply_markup=kb)
			except:
				await delmsg(call.message)
				await call.message.answer_photo(photo=open(images['smm_menu'], 'rb'), caption=text, reply_markup=kb)
		except:
			await call.answer('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', show_alert=True)

	elif cd[1] == 'cs':
		category_name = cd[2]
		category_type_hash = cd[3]
		service_id = cd[4]
		page_id = int(cd[5])
		
		services = await ssf_client.get_services(True)
		service_data = services[rpf(category_name)][category_type_hash][service_id]

		x = ssf_client.all_data['category_type_hash'].get(f'{rpf(category_name)}_{category_type_hash}')

		discount = await get_discount(uid)
		price_ = await round_to_precision(service_data["price"] + (service_data["price"] * extra_price_percent))
		price_po = await round_to_precision(service_data["price"] * 1000 + ((service_data["price"] * 1000) * extra_price_percent))
		if discount:
			price_d = await round_to_precision(price_ - price_ * discount["discount_amount"]/100)
			price_pod = await round_to_precision(price_po - price_po * discount["discount_amount"]/100)
			price_text = f'<b>üí• –¶–µ–Ω–∞ –∑–∞ 1 —à—Ç:</b>  <s>{price_} ‚ÇΩ</s>  <code>{price_d} ‚ÇΩ</code> (—Å–∫–∏–¥–∫–∞ <code>{discount["discount_amount"]}%</code>)\n<b>üí• –¶–µ–Ω–∞ –∑–∞ 1000 —à—Ç:</b>  <s>{price_po} ‚ÇΩ</s>  <code>{price_pod} ‚ÇΩ</code> (—Å–∫–∏–¥–∫–∞ <code>{discount["discount_amount"]}%</code>)'
		else: price_text = f'<b>üí• –¶–µ–Ω–∞ –∑–∞ 1 —à—Ç:</b>  <code>{price_} ‚ÇΩ</code>\n<b>üí• –¶–µ–Ω–∞ –∑–∞ 1000 —à—Ç:</b>  <code>{price_po} ‚ÇΩ</code>'
		text = f'''<b>üõí –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n‚î£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  <b>{sets_categories[category_name]}</b>\n‚îó –£—Å–ª—É–≥–∞:  <code>{service_data["name"]}</code>\n\n\n{price_text}\n\n<b>‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ:</b>  <code>{service_data["min"]} —à—Ç.</code>\n<b>üí¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ:</b>  <code>{service_data["max"]} —à—Ç.</code>\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{service_data["description"] if service_data.get('description') and service_data.get('description') != "" else "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ 1-30–º–∏–Ω. –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤!"}</i>'''

		try: await call.message.edit_text(text, reply_markup=await kb_get_category_types(category_name, category_type_hash, service_data['service_id'], page=page_id))
		except:
			await delmsg(call.message)
			await call.message.answer(text, reply_markup=await kb_get_category_types(category_name, category_type_hash, service_data['service_id'], page=page_id))

	elif cd[1] == 'b':
		category_name = cd[2]
		category_type_hash = cd[3]
		service_id = cd[4]
		page_id = int(cd[5])
		await states_smm.add_creds.set()
		
		services = await ssf_client.get_services(True)
		service_data = services[rpf(category_name)][category_type_hash][service_id]

		x = ssf_client.all_data['category_type_hash'].get(f'{rpf(category_name)}_{category_type_hash}')
		msg = await call.message.edit_text(f'<b>üõí –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n‚î£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  <code>{sets_categories[category_name]}</code>\n‚î£ –£—Å–ª—É–≥–∞:  <code>{service_data["name"]}</code>\n\n\n ‚ùóÔ∏è–î–õ–Ø –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê –£–ö–ê–ñ–ò–¢–ï –û–¢–ö–†–´–¢–£–Æ –°–°–´–õ–ö–£, –±–µ–∑ —Å–ª–æ–≤–∞ boost.\n(–ù–∞–ø—Ä–∏–º–µ—Ä https://t.me/+4V18dXn4ojJiNTFi –∏–ª–∏ https://t.me/boostmca).</b>', reply_markup=await kb_construct(InlineKeyboardMarkup(), {'‚Ü™ –ù–∞–∑–∞–¥': f'cd^smm:cs:{category_name}:{category_type_hash}:{service_id}:{page_id}'}))
		await state.update_data(msg=msg, category_name=category_name, category_type_hash=category_type_hash, service_id=service_id, page_id=page_id, service_data=service_data, x=x, state='url')

	elif cd[1] == 'by':
		if len(cd) == 3:
			await call.answer('‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ö†Ô∏è', show_alert=True)
			return await handler_smm(call, state, 'smm:menu')
		
		return await handler_smm(call, state, f'smm:b:{category_name}:{category_type_hash}:{service_id}:{page_id}')


@dp.message_handler(state=states_smm.add_creds)
async def states_smm_add_creds(message: types.Message, state: FSMContext):
	mt = message.text.strip()
	uid, username, first_name = get_user(message)
	state_data = await state.get_data()

	if state_data['state'] == 'url':
		await delmsg(state_data['msg'], message)
		if not mt.startswith('https://'):	
			msg = await message.answer('<b>‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>https://</code>! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>', reply_markup=await kb_construct(InlineKeyboardMarkup(), {'‚Ü™ –ù–∞–∑–∞–¥': f'cd^smm:cs:{state_data["category_name"]}:{state_data["category_type_hash"]}:{state_data["service_id"]}:{state_data["page_id"]}'}))
			return await state.update_data(msg=msg)
		
		msg = await message.answer(f'<b>üõí –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n‚îó üîó –°—Å—ã–ª–∫–∞:  <code>{mt}</code></b>\n\n\n<b>‚ùóÔ∏è –í–í–ï–î–ò–¢–ï –ö–û–õ–õ–ò–ß–ï–°–¢–í–û</b> <b>(–æ—Ç <code>{state_data["service_data"]["min"]}</code> –¥–æ <code>{state_data["service_data"]["max"]}</code>)</b>', reply_markup=await kb_construct(InlineKeyboardMarkup(), {'‚Ü™ –ù–∞–∑–∞–¥': f'cd^smm:cs:{state_data["category_name"]}:{state_data["category_type_hash"]}:{state_data["service_id"]}:{state_data["page_id"]}'}))
		await state.update_data(msg=msg, url=mt, state='amount')

	elif state_data['state'] == 'amount':
		await delmsg(state_data['msg'], message)
		if not mt.isnumeric():
			msg = await message.answer('<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>', reply_markup=await kb_construct(InlineKeyboardMarkup(), {'‚Ü™ –ù–∞–∑–∞–¥': f'cd^smm:cs:{state_data["category_name"]}:{state_data["category_type_hash"]}:{state_data["service_id"]}:{state_data["page_id"]}'}))
			return await state.update_data(msg=msg)
		amount = int(mt)

		if amount < int(state_data["service_data"]["min"]) or amount > int(state_data["service_data"]["max"]):
			msg = await message.answer(f'<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç <code>{state_data["service_data"]["min"]}</code> –¥–æ <code>{state_data["service_data"]["max"]}</code> –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>', reply_markup=await kb_construct(InlineKeyboardMarkup(), {'‚Ü™ –ù–∞–∑–∞–¥': f'cd^smm:cs:{state_data["category_name"]}:{state_data["category_type_hash"]}:{state_data["service_id"]}:{state_data["page_id"]}'}))
			return await state.update_data(msg=msg)
		

		orig_price_per_one = float(state_data["service_data"]["price"])
		orig_price = await round_to_precision(orig_price_per_one * amount)
		price_per_one = await round_to_precision(orig_price_per_one + (orig_price_per_one * extra_price_percent))
		price = round(await round_to_precision(price_per_one * amount), 2)

		price_text = f'<code>{price} ‚ÇΩ</code>'

		discount = await get_discount(uid)
		if discount:
			last_price = price
			price_per_one = await round_to_precision(price_per_one - (price_per_one * discount["discount_amount"]/100))
			price = await round_to_precision(price - (price * discount["discount_amount"]/100))
			price_text = f'<s>{last_price} ‚ÇΩ</s>  <code>{price} ‚ÇΩ</code> (—Å–∫–∏–¥–∫–∞ <code>{discount["discount_amount"]}%</code>)'


		services = await ssf_client.get_services(True)
		service_data = services[rpf(state_data['category_name'])][state_data['category_type_hash']][state_data['service_id']]

		msg = await message.answer(f'<b>üõí –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n‚î£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  <code>{sets_categories[state_data["category_name"]]}</code>\n‚î£ –¢–∏–ø:  <code>{state_data["x"]}</code>\n‚î£ –£—Å–ª—É–≥–∞:  <code>{service_data["name"]}</code>\n‚îÉ\n‚î£ üîó –°—Å—ã–ª–∫–∞:  <code>{state_data["url"]}</code>\n‚î£ üíé –ö–æ–ª-–≤–æ:  <code>{amount} —à—Ç.</code>\n‚îó üí∞ –¶–µ–Ω–∞:  {price_text}</b>\n\n\n<b>‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π</b>', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'üíé –ó–∞–∫–∞–∑–∞—Ç—å': f'cd^smm:by:{state_data["service_id"]}', '‚Ü™ –ù–∞–∑–∞–¥': f'cd^smm:cs:{state_data["category_name"]}:{state_data["category_type_hash"]}:{state_data["service_id"]}:{state_data["page_id"]}'}))
		await state.update_data(msg=msg, state='confirm', orig_price_per_one=orig_price_per_one, orig_price=orig_price, price_per_one=price_per_one, price=price, amount=amount)

	elif state_data['state'] == 'confirm':
		return await delmsg(message)


@dp.callback_query_handler(state=states_smm.add_creds)
async def states_smm_add_creds(call: types.CallbackQuery, state: FSMContext):
	uid, username, first_name = get_user(call)
	state_data = await state.get_data()
	await state.finish()

	discount = await get_discount(uid)
	if state_data['state'] == 'confirm' and call.data.startswith('smm:by:'):
		if state_data['price'] == 0 and not (discount and discount['discount_amount'] == 100):
			return await call.message.edit_text(f'ü§î <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω–Ω–∏–∫</b>\n–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤, <i>–Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è.</i>', reply_markup=await kb_construct(InlineKeyboardMarkup(), {'‚Ü™ –ù–∞–∑–∞–¥': f'cd^smm:cs:{state_data["category_name"]}:{state_data["category_type_hash"]}:{state_data["service_id"]}:{state_data["page_id"]}'}))
		user_db = await db.fetchrow('SELECT * FROM users WHERE uid = $1', uid)
		if state_data['price'] > 0 and user_db['balance'] < state_data['price']: return await call.message.edit_text('<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å': f'cd^user:refill_balance:1:{state_data["price"] - user_db["balance"]}', '‚Ü™ –ù–∞–∑–∞–¥': f'cd^smm:cs:{state_data["category_name"]}:{state_data["category_type_hash"]}:{state_data["service_id"]}:{state_data["page_id"]}'}))
		
		await call.answer('‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...', show_alert=True)
		task = await smm_create_task(uid, {'url': state_data['url'], 'amount': state_data['amount'], 'orig_price': state_data['orig_price'], 'orig_price_per_one': state_data['orig_price_per_one'], 'price': state_data['price'], 'price_per_one': state_data['price_per_one'], 'category_name': state_data['category_name'], 'category_type_hash': state_data['category_type_hash'], 'service_id': state_data['service_id']})
		if task['status']:
			return await handler_user(call, state, f'user:show_order:{task["order_id"]}')
		else: await call.message.edit_text(f'<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ ‚ùå</b>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {task["msg"]}', reply_markup=await kb_construct(InlineKeyboardMarkup(), {'‚Ü™ –ù–∞–∑–∞–¥': f'cd^smm:cs:{state_data["category_name"]}:{state_data["category_type_hash"]}:{state_data["service_id"]}:{state_data["page_id"]}'}))
	else: await handler_smm(call, state)


##################################!!! HANDLERS - ADMIN - HANDLERS !!!############################################################
class states_admin(StatesGroup):
	spam_create_session = State()
	spam_add_media = State()
	spam_confirm = State()

	search_user = State()
	change_balance = State()

	ban_reason_set = State()
	ban_time_set = State()

	find_receipt = State()
	create_promocode = State()
	refund_custom = State()


@dp.callback_query_handler(text_startswith='admin')
async def handler_admin(call: types.CallbackQuery, state: FSMContext, custom_data = None):
	await state.finish()
	cd = custom_data.split(':') if custom_data else call.data.split(':')

	
	
	uid, username, first_name = get_user(call)
	if uid not in admin_ids: return

	if cd[1] == 'menu':
		try: await call.message.edit_text('<b>üßëüèª‚Äçüíª –ê–¥–º–∏–Ω –º–µ–Ω—é</b>', reply_markup=await kb_admin_menu())
		except: 
			try: await call.message.delete()
			except: pass
			await call.message.answer('<b>üßëüèª‚Äçüíª –ê–¥–º–∏–Ω –º–µ–Ω—é</b>', reply_markup=await kb_admin_menu())

	elif cd[1] == 'orders':
		target_uid = int(cd[2])

		if len(cd) == 3:
			target_user = await db.fetchrow('SELECT * FROM users WHERE uid = $1', target_uid)
			orders = await db.fetch('SELECT * FROM orders WHERE uid = $1', target_uid)

			if len(orders) == 0: return await call.answer('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤', show_alert=True)
			await call.message.edit_text(f'<b>–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {format_user_url(user_db=target_user)} (<code>{target_uid}</code>)</b>', reply_markup=await kb_user_orders(orders, target_uid), disable_web_page_preview=True)
		
		elif len(cd) == 4:
			target_user = await db.fetchrow('SELECT * FROM users WHERE uid = $1', target_uid)
			order_id = int(cd[3])
			order_data = await db.fetchrow('SELECT * FROM orders WHERE id = $1', order_id)
			if time.time() - order_data['unix'] < 20: order_status = 'Pending'
			else:
				await call.answer('‚öôÔ∏è –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...')
				order_status = None
			if not order_status: order_status = '–ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'

			text = f'''<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ\n‚î£ üëÅ‚Äçüó® ID –∑–∞–∫–∞–∑–∞:  <code>{order_data["order_id"]}</code>\n‚î£ üíà –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  <code>{order_data["order_category_name"]}</code>\n‚î£ ‚≠êÔ∏è –£—Å–ª—É–≥–∞:  <code>{order_data["order_service_name"]}</code>\n‚î£ üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {format_user_url(user_db=target_user)} (<code>{target_uid}</code>)\n‚îÉ\n‚î£ üîó –°—Å—ã–ª–∫–∞:  <code>{order_data["order_url"]}</code>\n‚î£ üíé –ö–æ–ª-–≤–æ:  <code>{order_data["order_amount"]} —à—Ç.</code>\n‚î£ üí∞ –¶–µ–Ω–∞:  <code>{order_data["order_price"]} ‚ÇΩ</code>\n‚îÉ\n‚îÉ\n‚îó {order_statuses_emoji[order_status]} –°—Ç–∞—Ç—É—Å:  <code>{order_statuses[order_status] if order_statuses.get(order_status) else order_status}</code></b>'''

			msg = await call.message.edit_text(text, reply_markup=await kb_user_order(target_uid), disable_web_page_preview=True)
			order_status = (await ssf_client.get_order(order_data['order_id'])).get('status')
			if not order_status: order_status = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'

			text = f'''<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ\n‚î£ üëÅ‚Äçüó® ID –∑–∞–∫–∞–∑–∞:  <code>{order_data["order_id"]}</code>\n‚î£ üíà –ö–∞—Ç–µ–≥–æ—Ä–∏—è:  <code>{order_data["order_category_name"]}</code>\n‚î£ ‚≠êÔ∏è –£—Å–ª—É–≥–∞:  <code>{order_data["order_service_name"]}</code>\n‚î£ üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:  {format_user_url(user_db=target_user)} (<code>{target_uid}</code>)\n‚îÉ\n‚î£ üîó –°—Å—ã–ª–∫–∞:  <code>{order_data["order_url"]}</code>\n‚î£ üíé –ö–æ–ª-–≤–æ:  <code>{order_data["order_amount"]} —à—Ç.</code>\n‚î£ üí∞ –¶–µ–Ω–∞:  <code>{order_data["order_price"]} ‚ÇΩ</code>\n‚îÉ\n‚îÉ\n‚îó {order_statuses_emoji[order_status]} –°—Ç–∞—Ç—É—Å:  <code>{order_statuses[order_status] if order_statuses.get(order_status) else order_status}</code></b>'''
			await msg.edit_text(text, reply_markup=await kb_user_order(target_uid), disable_web_page_preview=True)

	elif cd[1] == 'ref_balance':
		act = cd[4]
		target_uid = int(cd[2])
		withdraw_amount = float(cd[3])

		if act == 's':
			try: await bot.send_message(target_uid, f'<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>')
			except: pass
			await call.answer('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', show_alert=True)
		elif act == 'c':
			user_db = await db.fetchrow('SELECT * FROM users WHERE uid = $1', target_uid)
			await db.execute('UPDATE users SET ref_balance = ref_balance + $1 WHERE uid = $2', round(float(user_db['ref_balance']) + withdraw_amount, 2), target_uid)
			try: await bot.send_message(target_uid, f'<b>‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω</b>')
			except: pass
			await call.answer('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω', show_alert=True)
		
		await delmsg(call.message)

	elif cd[1] == 'spam_create':
		if len(cd) == 2:
			return await call.message.edit_text('<i>üì® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏</i>',reply_markup=await kb_spam())

		await states_admin.spam_create_session.set()
		async with state.proxy() as data:
			data['spam_type'] = cd[2]
			data['message'] = await call.message.edit_text('<b>üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>', reply_markup=await kb_back('admin:spam_create'))

	elif cd[1] == 'search_user':
		await states_admin.search_user.set()
		async with state.proxy() as data:
			data['message'] = await call.message.edit_text(
				'üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>ID</b> –∏–ª–∏ <b>—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>',
				reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=2),{'‚Ü™ –ù–∞–∑–∞–¥':'cd^admin:menu'})
			)

	elif cd[1] == 'change_balance':
		await states_admin.change_balance.set()
		async with state.proxy() as data:
			user_balance = await db.fetchrow('SELECT balance FROM users WHERE uid = $1', cd[2])['balance']
			data['uid'] = int(cd[2])
			data['is_add'] = 0
			data['balance'] = user_balance
			data['message'] = await call.message.edit_text(
				f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{round(user_balance, 3)} ‚ÇΩ</code></b>',
				reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1),
					{
						'‚úÖ –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚úÖ':f'cd^admin:menu:False:{user_balance}',
						'‚Ü™ –ù–∞–∑–∞–¥':f'cd^temp:finduser:{cd[2]}'
					}
				)
			)

	elif cd[1] == 'ban':
		user_uid = int(cd[3])
		if cd[2] == '0': 
			await db.execute('UPDATE users SET is_banned = False WHERE uid = $1', user_uid)
			await db.execute('DELETE FROM banned WHERE uid = $1', user_uid)
			

			await call.answer('‚ùé –ü–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùé')
			try: await bot.send_message(int(cd[3]),'<b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.</b>\n<i>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞!</i>')
			except: pass
			return await handler_temp(call, state, f'temp:finduser:{user_uid}')

		elif cd[2] == '1':
			await states_admin.ban_reason_set.set()

			async with state.proxy() as data:
				data['uid'] = user_uid
				data['message'] = await call.message.edit_text(f'<b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>',reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1),{'–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã':f'cd^admin:menu:{user_uid}','‚Ü™ –ù–∞–∑–∞–¥':f'cd^temp:finduser:{user_uid}'}))

	elif cd[1] == 'stats':
		up_all, up_24h, all_bal, all_up, users, users_sub = 0, 0, 0, 0, 0, 0

		up_all = await db.fetchrow('SELECT COUNT(*) AS a, COALESCE(SUM(payment_amount), 0) AS m FROM transactions_refill')
		up_24h = await db.fetchrow('SELECT COUNT(*) AS a, COALESCE(SUM(payment_amount), 0) AS m FROM transactions_refill WHERE issue_date >= $1', int(time.time())-86400)
		
		sells_all = await db.fetchrow('SELECT COUNT(*) AS a, COALESCE(SUM(order_price), 0) AS m FROM orders')
		income_all = await db.fetchrow('SELECT COUNT(*) AS a, COALESCE(SUM(order_price - order_orig_price), 0) AS m FROM orders')
		all_bal = (await db.fetchrow('SELECT COALESCE(SUM(balance), 0) as q FROM users WHERE balance > 0'))['q']
		users = (await db.fetchrow('SELECT COALESCE(COUNT(id), 0) as q FROM users'))['q']

		text = f'''<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüñ• –ë–∞–ª–∞–Ω—Å –ø–∞–Ω–µ–ª–∏:  <code>–ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞</code>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –í—Å—ë –≤—Ä–µ–º—è:  <code>{users}</code>\nüí∏ –ü—Ä–æ–¥–∞–∂ –∑–∞ –í—Å—ë –≤—Ä–µ–º—è:  <code>{sells_all["a"]} —à—Ç ‚Äî {round(sells_all["m"], 2)} ‚ÇΩ</code>\nüí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –î–µ–Ω—å:  <code>{up_24h["a"]} —à—Ç ‚Äî {round(up_24h["m"], 2)} ‚ÇΩ</code>\nüí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –í—Å—ë –≤—Ä–µ–º—è:  <code>{up_all["a"]} —à—Ç ‚Äî {round(up_all["m"], 2)} ‚ÇΩ</code>\n\nüíµ –ü—Ä–∏–±—ã–ª—å –∑–∞ –í—Å—ë –≤—Ä–µ–º—è:  <code>{income_all["a"]} —à—Ç ‚Äî {round(income_all["m"], 2)} ‚ÇΩ</code>\nüí≥ –°—Ä–µ–¥—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:  <code>{round(all_bal, 2)} ‚ÇΩ</code>'''
		msg = await call.message.edit_text(text=text, reply_markup=await kb_back('admin:menu'))#f'<b>üî∂ –°—Ä–µ–¥—Å—Ç–≤–∞ üî∂</b>\nüìï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞:  <code>{up_24h} ‚ÇΩ</code>\nüí≥ –°—Ä–µ–¥—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:  <code>{round(all_bal, 3)} ‚ÇΩ</code>\nü•ù –ü–æ–ø–æ–ª–Ω–µ–Ω–æ:  <code>{all_up} ‚ÇΩ</code>\n\nüåÄ <b>–û–±—â–µ–µ</b> üåÄ\nüë∂üèø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:  <code>{users}</code>'
		balance = await ssf_client.get_balance()

		text = f'''<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüñ• –ë–∞–ª–∞–Ω—Å –ø–∞–Ω–µ–ª–∏:  <code>{str(balance.get("balance")) + " ‚ÇΩ" if balance.get("balance") is not None else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"}</code>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –í—Å—ë –≤—Ä–µ–º—è:  <code>{users}</code>\nüí∏ –ü—Ä–æ–¥–∞–∂ –∑–∞ –í—Å—ë –≤—Ä–µ–º—è:  <code>{sells_all["a"]} —à—Ç ‚Äî {round(sells_all["m"], 2)} ‚ÇΩ</code>\nüí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –î–µ–Ω—å:  <code>{up_24h["a"]} —à—Ç ‚Äî {round(up_24h["m"], 2)} ‚ÇΩ</code>\nüí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –í—Å—ë –≤—Ä–µ–º—è:  <code>{up_all["a"]} —à—Ç ‚Äî {round(up_all["m"], 2)} ‚ÇΩ</code>\n\nüíµ –ü—Ä–∏–±—ã–ª—å –∑–∞ –í—Å—ë –≤—Ä–µ–º—è:  <code>{income_all["a"]} —à—Ç ‚Äî {round(income_all["m"], 2)} ‚ÇΩ</code>\nüí≥ –°—Ä–µ–¥—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:  <code>{round(all_bal, 2)} ‚ÇΩ</code>'''
		try: await msg.edit_text(text, reply_markup=await kb_back('admin:menu'))
		except: pass

	elif cd[1] == 'all_banned':
		await call.message.edit_text(f'<i>–í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i> <code>{len(await db.fetch("SELECT id FROM users WHERE is_banned = True"))}</code>', reply_markup=await kb_admin_banned_users())

	elif cd[1] == 'find_receipt':
		return await call.answer('‚öôÔ∏è –ò–¥–∏ –ø–æ—Å–ø–∏')
		await states_admin.find_receipt.set()
		async with state.proxy() as data:
			data['message'] = await call.message.edit_text('üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>ID</b> —á–µ–∫–∞',reply_markup=await kb_back('admin:menu'))

	elif cd[1] == 'promocode': # –¢–∏–ø—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {1: –î–µ–Ω—å–≥–∏, 2: –°–∫–∏–¥–∫–∞ –≤ %}
		# –ú–µ–Ω—é
		if len(cd) == 2:
			await call.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>', reply_markup=await kb_admin_promocode())
		
		elif len(cd) == 3:
			act = cd[2]

			if act == 'c':
				await call.message.edit_text('<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞', reply_markup=await kb_admin_promocode_create('type'))
			elif act == 'g':
				
				

				promocodes_ = await db.fetch('SELECT * FROM promocodes WHERE promocode_is_active = True')
				promocodes = []
				if len(promocodes_) < 10:
					for x in promocodes_:
						if x["promocode_type"] == 1: promocodes.append(f'<code>{x["promocode_id"]}</code> --> Uses: <i>{len(x["promocode_activated_uids"].split(";")) if x["promocode_activated_uids"] != "" else 0}/{x["promocode_maxuses"]}</i> | Reward: <code>{x["promocode_reward"]} ‚ÇΩ</code>')
						elif x['promocode_type'] == 2: promocodes.append(f'<code>{x["promocode_id"]}</code> --> Uses: <i>{len(x["promocode_activated_uids"].split(";")) if x["promocode_activated_uids"] != "" else 0}/{x["promocode_maxuses"]}</i> | Reward: <code>{x["promocode_reward"]} %</code>')
					promocodes = '\n'.join(promocodes)
					
					await call.message.edit_text(f'üåÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b><code>{len(promocodes_)}</code> —à—Ç.</b>\n\n{promocodes}',reply_markup=await kb_back('admin:promocode'))
				else:
					await call.answer('‚öôÔ∏è –í—ã–≥—Ä—É–∂–∞—é...')
					for x in promocodes_:
						if x["promocode_type"] == 1: promocodes.append(f'{x["promocode_id"]} --> Uses: {len(x["promocode_activated_uids"].split(";")) if x["promocode_activated_uids"] != "" else 0}/{x["promocode_maxuses"]} | Reward: {x["promocode_reward"]} ‚ÇΩ')
						elif x['promocode_type'] == 2: promocodes.append(f'{x["promocode_id"]} --> Uses: {len(x["promocode_activated_uids"].split(";")) if x["promocode_activated_uids"] != "" else 0}/{x["promocode_maxuses"]} | Reward: {x["promocode_reward"]} %')
					promocodes = '\n'.join(promocodes)

					f_name = f'Active promocodes #{random.randint(111,999)}.txt'
					open(f_name, 'w', encoding='utf-8').write(promocodes)
					await call.message.answer_document(open(f_name,'rb'), caption=f'üåÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: <b><code>{len(promocodes_)}</code> —à—Ç.</b>', reply_markup=await kb_close())
					threading.Thread(target=os_delete,args=[f_name]).start()

		elif len(cd) == 4:
			act = cd[2]
			promocode_type = int(cd[3])

			if act == 'c':
				await states_admin.create_promocode.set()
				msg = await call.message.edit_text(f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚îó –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[promocode_type]}</code>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥</b>' if promocode_type == 1 else f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚îó –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[promocode_type]}</code>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∏–¥–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–æ—Ç <code>1</code> –¥–æ <code>100</code>)</b>', reply_markup=await kb_admin_promocode_create('reward'))
				await state.update_data(msg=msg, promocode_type=promocode_type, state='reward')

			elif act == 'r':
				reward = float(cd[4])

				await states_admin.create_promocode.set()
				msg = await call.message.edit_text(f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[promocode_type]}</code>\n‚îó –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{reward}</code>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>' if promocode_type == 1 else f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[promocode_type]}</code>\n‚îó –°–∫–∏–¥–∫–∞:  <code>{reward}</code>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</b>', reply_markup=await kb_admin_promocode_create('uses_amount'))
				await state.update_data(msg=msg, promocode_type=promocode_type, reward=reward, state='uses_amount')

	elif cd[1] == 'refund':
		order_id = int(cd[2])
		act = cd[3]

		order_db = await db.fetchrow('SELECT * FROM orders WHERE order_id = $1', order_id)
		if order_db['order_status'] in (1, 2):
			return await call.answer('–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –∑–∞–∫–∞–∑ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã', show_alert=True)

		if act == 'accept':
			if len(cd) == 4: order_price = order_db['order_price']
			else: order_price = float(cd[4])
			await db.execute('UPDATE users SET balance = balance + $1 WHERE uid = $2', order_price, order_db['uid'])
			await db.execute('UPDATE orders SET order_status = 2 WHERE order_id = $1', order_id)
			
			try: await bot.send_message(order_db['uid'], f'<b>üìÉ –í–∞—à –∑–∞–∫–∞–∑ <code>{order_id}</code> –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ <code>{order_price} ‚ÇΩ</code> –≤–æ–∑—Ä–∞—â–µ–Ω—ã</b>.', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'‚ùå –ó–∞–∫—Ä—ã—Ç—å':'cd^utils:delete'}), disable_web_page_preview=True)
			except: pass
			user_db = await db.fetchrow('SELECT * FROM users WHERE uid = $1', order_db['uid'])
			await admin_spam(f'<b>üìÉ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {format_user_url(user_db=user_db)}|<code>{user_db["uid"]}</code> –ø–æ–ª—É—á–∏–ª –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –∑–∞–∫–∞–∑ <code>{order_id}</code> –≤ —Ä–∞–∑–º–µ—Ä–µ <code>{order_price} ‚ÇΩ</code></b>')
			await call.answer('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω', show_alert=True)
			await delmsg(call.message)
		elif act == 'custom':
			await call.message.answer(f'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ <code>{order_id}</code></b>', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'‚ùå –û—Ç–º–µ–Ω–∞': 'cd^admin:menu'}))
			await states_admin.refund_custom.set()
			await state.update_data(order_id=order_id)
			await call.answer('')
		else:
			await db.execute('UPDATE orders SET order_status = 1 WHERE order_id = $1', order_id)
			
			await call.answer('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω', show_alert=True)
			await delmsg(call.message)



@dp.message_handler(state=states_admin.refund_custom)
async def states_admin_refund_custom(message: types.Message, state: FSMContext):
	mt = message.text
	try: order_price = float(mt)
	except: return await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ ‚ùóÔ∏è', reply_markup=await kb_close())
	state_data = await state.get_data()

	order_id = state_data['order_id']
	print(order_id)
	await state.finish()
	await message.answer(f'<b>ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: <code>{order_price} ‚ÇΩ</code></b>', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1), {'‚úÖ –í–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞': f'cd^admin:refund:{order_id}:accept:{order_price}', '‚ùå –û—Ç–º–µ–Ω–∞': 'cd^utils:delete'}))


@dp.callback_query_handler(state=states_admin.refund_custom)
async def states_admin_refund_custom_(call: types.CallbackQuery, state: FSMContext):
	await state.finish()
	await delmsg(call.message)


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=states_admin.search_user)
async def states_admin_search_user(message: types.Message, state: FSMContext, custom_data = None):
	
	
	async with state.proxy() as data:

		if custom_data is None:
			try:
				await data['message'].delete()
				await message.delete()
			except: pass
			mt = message.text.replace('@','')
		else: mt = str(custom_data)
		
		if mt.isdigit():
			user = await db.fetchrow('SELECT * FROM users WHERE uid = $1', int(mt))
		else:
			user = await db.fetchrow('SELECT * FROM users WHERE username = $1', mt.lower())

		if user is None: data['message'] = await message.answer('<b>üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>',reply_markup=await kb_back('admin:menu')); return
		text = f'<b>üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω</b>\n\n<b>üÉè –ü—Ä–æ—Ñ–∏–ª—å</b>\n<i>ID</i>:  <code>{user["uid"]}</code>\n<i>username</i>:  <code>{user["username"]}</code>\n<i>–ë–∞–ª–∞–Ω—Å</i>:  <code>{round(user["balance"], 3)} ‚ÇΩ</code>\n<i>–†–µ—Ñ. –ë–∞–ª–∞–Ω—Å</i>:  <code>{round(user["ref_balance"], 3)} ‚ÇΩ</code>\n<i>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</i>:  <code>{datetime.strftime(datetime.fromtimestamp(user["registration_date"]),"%d.%m.%Y %H:%M")}</code>'
		
		if user['referral_from_id'] not in ['None', '', None]:
			referral_user = await db.fetchrow('SELECT * FROM users WHERE uid = $1', user['uid'])
			text += f'\n<i>–ü—Ä–∏–≥–ª–∞—à—ë–Ω</i>:  <b><a href="tg://user?id={referral_user["uid"]}">{referral_user["username"]}</a> | <code>{referral_user["uid"]}</code></b>'
		
		if user['is_banned']:
			ban_info = await db.fetchrow('SELECT * FROM banned WHERE uid = $1', user['uid'])
			text+=f'\n\n<b>üõë‚úã –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞</b>\n<i>–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</i>:  <code>{ban_info["ban_reason"] if ban_info["ban_reason"] != "" else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"}</code>'
			if ban_info['unban_ts'] != 0: text+=f'\n<i>–î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</i>:  <code>{datetime.strftime(datetime.fromtimestamp(ban_info["issue_date"]+ban_info["unban_ts"]),"%d.%m.%Y %H:%M")}</code>'

		await message.answer(text, reply_markup=await kb_admin_menu_user(user), disable_web_page_preview=True)

	await state.finish()
@dp.callback_query_handler(state=states_admin.search_user)
async def states_admin_search_user_(call: types.CallbackQuery, state: FSMContext):
	await handler_admin(call,state)


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=states_admin.change_balance)
async def states_admin_change_balance(message: types.Message, state: FSMContext):
	
	
	async with state.proxy() as data:
		try: await data['message'].delete()
		except: pass
		try: await message.delete()
		except: pass

		mt = message.text
		try: amount = float(mt)
		except: data['message'] = await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</b>'); return
		if data['is_add'] == 0: 
			await db.execute('UPDATE users SET balance = balance+$1 WHERE uid = $2', amount, data['uid'])
			try: await bot.send_message(data['uid'],f'<b>üí≥ –í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ</b> <code>{round(amount, 3)} ‚ÇΩ</code>')
			except: pass
		elif data['is_add'] == 1: await db.execute('UPDATE users SET balance = balance-$1 WHERE uid = $2', amount, data['uid'])
		else: await db.execute('UPDATE users SET balance = $1 WHERE uid = $2', amount, data['uid'])
		

		return await states_admin_search_user(message, state, data['uid'])
@dp.callback_query_handler(state=states_admin.change_balance)
async def states_admin_change_balance_(call: types.CallbackQuery, state: FSMContext):
	cd = call.data

	if 'admin:menu' in cd:
		async with state.proxy() as data:
			ia = data['is_add']
			uid = data['uid']
			balance = data['balance']
			b=ia+1 if ia <= 1 else 0
			v={0:'‚úÖ –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚úÖ',1:'üî¥ –ú–∏–Ω—É—Å–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å üî¥',2:'üü° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å üü°'}
			data['is_add'] = b

			data['m'] = await call.message.edit_text(f'<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{(round(balance, 3))} ‚ÇΩ</code></b>{" "*random.randint(1,9)}',reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=1),{v[b]:f'cd^admin:menu:{b}:{balance}','‚Ü™ –ù–∞–∑–∞–¥':f'cd^temp:finduser:{uid}'}))
	
	else: await handler_temp(call, state)


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü—Ä–∏—á–∏–Ω–∞
@dp.message_handler(state=states_admin.ban_reason_set)
async def states_admin_ban_reason_set(message: types.Message, state: FSMContext):
	ts = int(time.time())

	async with state.proxy() as data:
		user_uid = data['uid']
		try:
			await message.delete()
			await data['message'].delete()
		except: pass
		ban_reason = message.text

		try:await bot.send_message(data['uid'], f'<b>–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞\n–ü—Ä–∏—á–∏–Ω–∞:</b> <code>{ban_reason}</code>\n<b>–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <i>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</i> {username_support}</b>')
		except:pass
		await ban_user(user_uid, ban_reason)

		await states_admin.ban_time_set.set()
		data['message'] = await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n<i>–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</i> <code>{ban_reason}</code>\n\n–í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –≤ <i>—Å–µ–∫—É–Ω–¥–∞—Ö</i>', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=2), {'1 —á–∞—Å':f'cd^admin:menu:3600','24 —á–∞—Å–∞':f'cd^admin:menu:86400','üí® –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':f'cd^temp:finduser:{user_uid}'}))
@dp.callback_query_handler(state=states_admin.ban_reason_set)
async def states_admin_ban_reason_set_(call: types.CallbackQuery, state: FSMContext):
	cd = call.data.split(':')
	if 'admin' not in cd: return await handler_temp(call, state)

	ts = int(time.time())

	async with state.proxy() as data:
		try:await bot.send_message(data['uid'], f'<b>–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞</b>\n<b>–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <i>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</i> {username_support}</b>')
		except:pass

		user_uid = data['uid']
		ban_reason = '–ù–µ—Ç'
		await ban_user(user_uid)

		await states_admin.ban_time_set.set()

		data['message'] = await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n<i>–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</i> <code>{ban_reason}</code>\n\n–í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –≤ <i>—Å–µ–∫—É–Ω–¥–∞—Ö</i>', reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=2), {'1 —á–∞—Å':f'cd^admin:menu:3600','24 —á–∞—Å–∞':f'cd^admin:menu:86400','üí® –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':f'cd^temp:finduser:{user_uid}'}))

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –í—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
@dp.message_handler(state=states_admin.ban_time_set)
async def states_admin_ban_time_set(message: types.Message, state: FSMContext):
	mt = message.text
	async with state.proxy() as data:
		try: await message.delete()
		except: pass
		if 'temp' in data: await data['temp'].delete()
		if mt.isdigit() is False:
			data['temp'] = await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</b>', reply_markup=await kb_close())
			return

		ban_time = int(mt)
		try: await data['message'].delete()
		except: pass

		await db.execute('UPDATE banned Set unban_ts = $1 WHERE uid = $2', ban_time, data['uid'])
		return await states_admin_search_user(message, state, data['uid'])
@dp.callback_query_handler(state=states_admin.ban_time_set)
async def states_admin_ban_time_set_(call: types.CallbackQuery, state: FSMContext):
	cd = call.data.split(':')
	async with state.proxy() as data:
		if 'temp' in data: await data['temp'].delete()

		ban_time = int(cd[2])
		if ban_time != data['uid']:
			await db.execute('UPDATE banned Set unban_ts = $1 WHERE uid = $2', ban_time, data['uid'])

		return await handler_temp(call, state, f'temp:finduser:{data["uid"]}')


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –†–∞—Å—Å—ã–ª–∫–∞ - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(state=states_admin.spam_create_session, content_types=['photo','text'])
async def states_admin_spam_create_session(message: types.Message, state: FSMContext):
	mt = message.text
	async with state.proxy() as data: 
		try: await data['message'].delete()
		except: pass
		try: await message.delete()
		except: pass
		if data['spam_type'] == 'image':
			data['message'] = await message.answer(
				'<i>üèû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</i>',
				reply_markup=await kb_back('admin:menu')
			)

			await states_admin.spam_add_media.set()

		elif data['spam_type'] == 'text':
			data['message'] = await message.answer(mt)
			await message.answer(
				'<i>üì¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?</i>',
				reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=2),
					{
						'–ó–∞–ø—É—Å—Ç–∏—Ç—å':'cd^admin:menu:yes',
						'–ù–µ—Ç':'cd^admin:menu',
						'‚Ü™ –ù–∞–∑–∞–¥':'cd^admin:menu'
					}
				)
			)

			await states_admin.spam_confirm.set()
		
		data['spam_text'] = mt
		data['spam_photo'] = 'None'
@dp.callback_query_handler(state=states_admin.spam_create_session)
async def states_admin_spam_create_session_(call: types.CallbackQuery, state: FSMContext):
	return await handler_admin(call, state)

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –†–∞—Å—Å—ã–ª–∫–∞ - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
@dp.message_handler(state=states_admin.spam_add_media, content_types=['photo'])
async def states_admin_spam_add_media(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		try: await data['message'].delete()
		except: pass

		name = random.randint(1,99999)

		await message.photo[-1].download(f'{name}.jpg')
		data['message'] = await message.answer_photo(open(f'{name}.jpg', 'rb'), caption=data['spam_text'])
		
		await message.answer('<i>üì¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?</i>',reply_markup=await kb_construct(InlineKeyboardMarkup(row_width=2),{'–ó–∞–ø—É—Å—Ç–∏—Ç—å':'cd^admin:menu:yes','–ù–µ—Ç':'cd^admin:menu','‚Ü™ –ù–∞–∑–∞–¥':'cd^admin:menu'}))
		await message.delete()
		
		data['spam_photo'] = name
		await states_admin.spam_confirm.set()
@dp.callback_query_handler(state=states_admin.spam_add_media)
async def states_admin_spam_add_media_(call: types.CallbackQuery, state: FSMContext):
	return await handler_admin(call, state)

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –†–∞—Å—Å—ã–ª–∫–∞ - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query_handler(state=states_admin.spam_confirm)
async def states_admin_spam_confirm_(call: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		spam_type, spam_text, spam_photo = data['spam_type'], data['spam_text'], data['spam_photo']
		try:await data['message'].delete()
		except:pass
	
	await state.finish()
	if 'yes' in call.data:
		await call.answer('üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!', show_alert=True)
		asyncio.get_event_loop().create_task(users_spam(call.from_user.id, spam_type, spam_text, None if spam_photo == 'None' else spam_photo))

	return await handler_admin(call, state)


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(state=states_admin.create_promocode)
async def states_admin_create_promocode(message: types.Message, state: FSMContext):
	mt = message.text
	state_data = await state.get_data()

	await delmsg(state_data['msg'], message)
	if state_data['state'] == 'reward':
		try: reward = float(mt.replace(',', '.'))
		except:
			msg = await message.answer(f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚îó –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n\n<b>‚ùå –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>' if state_data['promocode_type'] == 1 else f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚îó –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n\n<b>–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>', reply_markup=await kb_admin_promocode_create(state_data['state']))
			return await state.update_data(msg=msg)

		msg = await message.answer(f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚îó –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{reward}</code>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>' if state_data['promocode_type'] == 1 else f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚îó –°–∫–∏–¥–∫–∞:  <code>{reward}</code>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</b>', reply_markup=await kb_admin_promocode_create('uses_amount'))
		await state.update_data(msg=msg, reward=reward, state='uses_amount')
		state_data = await state.get_data()


	elif state_data['state'] == 'uses_amount':
		if not mt.isnumeric():
			msg = await message.answer(f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚îó –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{state_data["reward"]}</code>\n\n<b>‚ùå –ö–æ–ª-–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>' if state_data['promocode_type'] == 1 else f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚îó –°–∫–∏–¥–∫–∞:  <code>{state_data["reward"]}</code>\n\n<b>‚ùå –ö–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>', reply_markup=await kb_admin_promocode_create(state_data['state']))
			return await state.update_data(msg=msg)
		
		await state.update_data(uses_amount=int(mt))
		state_data = await state.get_data()

		await state.finish()

		
		

		promocodes = []
		promocodes_pm = []
		if state_data['promocode_type'] == 1:
			for x in range(state_data['uses_amount']):
				promocode_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
				promocodes.append(promocode_id)
				promocodes_pm.append(f'<code>{promocode_id}</code>')
				await db.execute('INSERT INTO promocodes (promocode_id, promocode_maxuses, promocode_reward, promocode_type, promocode_activated_uids) VALUES ($1, $2, $3, $4, $5)', promocode_id, 1, state_data['reward'], state_data['promocode_type'], '')
		elif state_data['promocode_type'] == 2:
			promocode_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
			promocodes.append(promocode_id)
			promocodes_pm.append(f'<code>{promocode_id}</code>')
			await db.execute('INSERT INTO promocodes (promocode_id, promocode_maxuses, promocode_reward, promocode_type, promocode_activated_uids) VALUES ($1, $2, $3, $4, $5)', promocode_id, state_data['uses_amount'], state_data['reward'], state_data['promocode_type'], '')
		

		if len(promocodes) < 10:
			t = "\n".join(promocodes_pm)
			msg = await message.answer(f'<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚î£ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{state_data["reward"]}</code>\n‚îó –ö–æ–ª-–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:  <code>{state_data["uses_amount"]}</code>\n\n{t}' if state_data['promocode_type'] == 1 else f'<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚î£ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{state_data["reward"]}</code>\n‚îó –ö–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:  <code>{state_data["uses_amount"]}</code>\n\n{t}', reply_markup=await kb_back('admin:promocode'))
		else:
			f_name = f'Sub promocodes #{random.randint(111,999)}.txt'
			open(f_name,'w',encoding='utf-8').write("\n".join(promocodes))
			await message.answer_document(open(f_name,'rb'), caption=f'<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚î£ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{state_data["reward"]}</code>\n‚îó –ö–æ–ª-–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:  <code>{state_data["uses_amount"]}</code>' if state_data['promocode_type'] == 1 else f'<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚î£ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{state_data["reward"]}</code>\n‚îó –ö–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:  <code>{state_data["uses_amount"]}</code>', reply_markup=await kb_back('admin:promocode'))
			threading.Thread(target=os_delete,args=[f_name]).start()

@dp.callback_query_handler(state=states_admin.create_promocode)
async def states_admin_create_promocode_(call: types.CallbackQuery, state: FSMContext):
	cd = call.data.split(':')
	state_data = await state.get_data()

	if call.data in ('admin:menu', 'admin:promocode', 'admin:promocode:c'): return await handler_admin(call, state)
	elif state_data['state'] == 'reward':
		msg = await call.message.edit_text(f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚îó –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{float(cd[4])}</code>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>' if state_data['promocode_type'] == 1 else f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚îó –°–∫–∏–¥–∫–∞:  <code>{float(cd[4])}</code>\n\n<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</b>', reply_markup=await kb_admin_promocode_create('uses_amount'))
		await state.update_data(msg=msg, reward=float(cd[4]), state='uses_amount')

	elif state_data['state'] == 'uses_amount':
		await state.update_data(uses_amount=int(cd[5]))
		state_data = await state.get_data()
		await state.finish()

		
		

		promocodes = []
		promocodes_pm = []
		if state_data['promocode_type'] == 1:
			for x in range(state_data['uses_amount']):
				promocode_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
				promocodes.append(promocode_id)
				promocodes_pm.append(f'<code>{promocode_id}</code>')
				await db.execute('INSERT INTO promocodes (promocode_id, promocode_maxuses, promocode_reward, promocode_type, promocode_activated_uids) VALUES ($1, $2, $3, $4, $5)', promocode_id, 1, state_data['reward'], state_data['promocode_type'], '')
		elif state_data['promocode_type'] == 2:
			promocode_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
			promocodes.append(promocode_id)
			promocodes_pm.append(f'<code>{promocode_id}</code>')
			await db.execute('INSERT INTO promocodes (promocode_id, promocode_maxuses, promocode_reward, promocode_type, promocode_activated_uids) VALUES ($1, $2, $3, $4, $5)', promocode_id, state_data['uses_amount'], state_data['reward'], state_data['promocode_type'], '')
		

		if len(promocodes) < 10:
			t = "\n".join(promocodes_pm)
			msg = await call.message.edit_text(f'<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚î£ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{state_data["reward"]}</code>\n‚îó –ö–æ–ª-–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:  <code>{state_data["uses_amount"]}</code>\n\n{t}' if state_data['promocode_type'] == 1 else f'<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚î£ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{state_data["reward"]}</code>\n‚îó –ö–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:  <code>{state_data["uses_amount"]}</code>\n\n{t}', reply_markup=await kb_back('admin:promocode'))
		else:
			f_name = f'Sub promocodes #{random.randint(111,999)}.txt'
			open(f_name,'w',encoding='utf-8').write("\n".join(promocodes))
			await call.message.answer_document(open(f_name,'rb'), caption=f'<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚î£ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{state_data["reward"]}</code>\n‚îó –ö–æ–ª-–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:  <code>{state_data["uses_amount"]}</code>' if state_data['promocode_type'] == 1 else f'<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã</b>\n‚î£ –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:  <code>{promocode_types[state_data["promocode_type"]]}</code>\n‚î£ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:  <code>{state_data["reward"]}</code>\n‚îó –ö–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:  <code>{state_data["uses_amount"]}</code>', reply_markup=await kb_back('admin:promocode'))
			threading.Thread(target=os_delete,args=[f_name]).start()


async def ban_user(user_uid: int, ban_reason = ''):
	ts = int(time.time())
	async with db.pool.acquire() as conn:
		await conn.execute('INSERT INTO banned (uid, issue_date, ban_reason) VALUES ($1, $2, $3)', user_uid, ts, ban_reason)
		await conn.execute('UPDATE users Set is_banned = True WHERE uid = $1', user_uid)
	
#################################################################################################################################
async def on_startup(dp):
	await db.init_pool()

	global bot_info
	bot_info=await bot.get_me()

	for x in range(10):
		try: await ssf_client.get_services(True) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
		except:
			await asyncio.sleep(2)
			continue
		break


	async def set_default_commands(dp):
		await dp.bot.set_my_commands([types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])
	await set_default_commands(dp)

	asyncio.get_event_loop().create_task(runTasks())

if __name__ == '__main__':
	dp.middleware.setup(ThrottlingMiddleware())

	try: executor.start_polling(dp, on_startup=on_startup)
	except Exception as error: logging.critical('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!')